setwd("~/Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project3_PoodleKFC/doc")
setwd("./ads_spr2017_proj3")
experiment_dir <- "../data/zipcode/" # This will be modified for different data sets.
img_train_dir <- paste(experiment_dir, "train/", sep="")
img_test_dir <- paste(experiment_dir, "test/", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model.values)
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep=""),
header=F)
label_train <- as.numeric(unlist(label_train) == "9")
source("./lib/feature.R")
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zipcode",
export=TRUE))
}
if(!require("EBimage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
library(EBimage)
library("EBimage")
biocLite("EBImage")
library("EBimage")
library(EBimage)
library("EBImage")
setwd("./ads_spr2017_proj3")
experiment_dir <- "../data/zipcode/" # This will be modified for different data sets.
img_train_dir <- paste(experiment_dir, "train/", sep="")
img_test_dir <- paste(experiment_dir, "test/", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep=""),
header=F)
label_train <- as.numeric(unlist(label_train) == "9")
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zipcode",
export=TRUE))
}
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zip",
export=TRUE))
}
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zip",
export=TRUE))
}
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zip",
export=TRUE))
}
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zip",
export=TRUE))
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir,
"test",
data_name="zip",
export=TRUE))
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zip",
export=TRUE))
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir,
"test",
data_name="zip",
export=TRUE))
}
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
source("../lib/train.R")
source("../lib/test.R")
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(depth_values), 2))
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
experiment_dir <- "../data/zipcode/" # This will be modified for different data sets.
img_train_dir <- paste(experiment_dir, "train/", sep="")
img_test_dir <- paste(experiment_dir, "test/", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep=""),
header=F)
label_train <- as.numeric(unlist(label_train) == "9")
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zip",
export=TRUE))
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir,
"test",
data_name="zip",
export=TRUE))
}
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
source("../lib/train.R")
source("../lib/test.R")
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
if(run.cv){
load("../output/err_cv.RData")
#pdf("../fig/cv_results.pdf", width=7, height=5)
plot(model_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.15))
points(model_values, err_cv[,1], col="blue", pch=16)
lines(model_values, err_cv[,1], col="blue")
arrows(model_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
if(run.cv){
load("../output/err_cv.RData")
#pdf("../fig/cv_results.pdf", width=7, height=5)
plot(model_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.15))
points(model_values, err_cv[,1], col="blue", pch=16)
lines(model_values, err_cv[,1], col="blue")
arrows(model_values, err_cv[,1]-err_cv[,2], model_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
if(run.cv){
load("../output/err_cv.RData")
#pdf("../fig/cv_results.pdf", width=7, height=5)
plot(model_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.25))
points(model_values, err_cv[,1], col="blue", pch=16)
lines(model_values, err_cv[,1], col="blue")
arrows(model_values, err_cv[,1]-err_cv[,2], model_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
model_best=model_values[1]
if(run.cv){
model_best <- model_values[which.min(err_cv[,1])]
}
par_best <- list(par=model_best)
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
View(err_cv)
which.min(err_cv[,1])
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
fit_train <- train(dat_train, label_train, par_best)
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par=par_best))
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par=par_best))
par_best$par
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
source('~/Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project3_PoodleKFC/lib/train.R')
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
source('~/Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project3_PoodleKFC/lib/train.R')
model_best=model_values[1]
if(run.cv){
model_best <- model_values[which.min(err_cv[,1])]
}
par_best <- list(depth=model_best)
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
save(fit_train, file="../output/fit_train.RData")
tm_test=NA
if(run.test){
load(file=paste0("../output/feature_", "zip", "_", "test", ".RData"))
load(file="../output/fit_train.RData")
tm_test <- system.time(pred_test <- test(fit_train, dat_test))
save(pred_test, file="../output/pred_test.RData")
}
cat("Time for constructing training features=", tm_feature_train[1], "s \n")
cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
cat("Time for training model=", tm_train[1], "s \n")
cat("Time for making prediction=", tm_test[1], "s \n")
load("/Users/xiaoxiaoguo/Documents/GitHub/GR5243 ADS/Spring2018-Project3-Group2/output/rgb_feature_new3.RData")
load("/Users/xiaoxiaoguo/Documents/GitHub/GR5243 ADS/Spring2018-Project3-Group2/output/HOG.RData")
gbm.sift.test <- gbm_test(fit_xgb_rsh, rsh_test)
need.packages <- c("gbm","EBImage","xgboost","OpenImageR", "dplyr", "grDevices", "ggplot2")
new.packages <- need.packages[!(need.packages %in% installed.packages()[,"Package"])]
if(length(new.packages))
{
install.packages(new.packages)
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
library("gbm")
library("xgboost")
library("EBImage")
library("xgboost")
library("OpenImageR")
library("dplyr")
library("grDevices")
library("ggplot2")
source("../lib/feature_all.R")
img_dir<- "../data/train/images/" # The fold with training images
if(run.feature.train)
{
tm_rgb <- system.time(rgb_feature <- feature_rgb(img_dir, export=TRUE))
}
run.feature = TRUE
run.cv = TRUE
run.feature.train = TRUE
run.feature.test = TRUE
source("../lib/feature_all.R")
img_dir<- "../data/train/images/" # The fold with training images
if(run.feature.train)
{
tm_rgb <- system.time(rgb_feature <- feature_rgb(img_dir, export=TRUE))
}
cat("Time for constructing RGB feature is ", tm_rgb[3], "s \n")
if(run.feature.train)
{
tm_hog <- system.time(hog_feature <- feature_hog(img_dir, export=TRUE))
}
source("../lib/feature_all.R")
img_dir<- "../data/train/images/" # The fold with training images
if(run.feature.train)
{
tm_rgb <- system.time(rgb_feature <- feature_rgb(img_dir, export=TRUE))
}
cat("Time for constructing RGB feature is ", tm_rgb[3], "s \n")
if(run.feature.train)
{
tm_hog <- system.time(hog_feature <- feature_hog(img_dir, export=TRUE))
}
cat("Time for constructing HOG feature is ", tm_hog[3], "s \n")
sift_train <- read.csv("../data/train/SIFT_train.csv", header = F) # Load SIFT features
sift_train <- sift_train[, -1]
if(run.feature.train)
{
tm_pca_sift <- system.time(pca_sift_feature <- feature_pca(sift_train))
}
cat("Time for constructing resized SIFT feature is ", tm_pca_sift[3], "s \n")
source("../lib/Train_final.R")
source("../lib/Test.R")
source("../lib/CV.R")
label_train <- read.csv("../data/train/label_train.csv", header = T)
label_train <- read.csv("../data/train/label_train.csv", header = T)
rsh_train <- cbind(rgb_feature, hog_feature, pca_sift_feature)
tm_xgb.rsh <- NA
if(run.feature.train){
best_para<-list(max_depth = 3, eta = 0.3, nrounds = 150, gamma = 0,
nthread = 2, subsample = 0.5,
objective = "multi:softprob", num_class = 3)
xgbst.train <- xgb.DMatrix(data = data.matrix(rsh_train), label = label_train[ ,3] - 1)
tm_xgb.rsh <- system.time(fit_xgb_rsh <- xgboost(data=xgbst.train, params = best_para, nrounds = best_para$nrounds, verbose = 0))
}
cat("Time for training the best XGBoost on SIFT (PC) + RGB + HoG features is ", tm_xgb.rsh[3], "s \n")
source("../lib/feature_all.R")
img_dir_test<- "../data/test/images/" # The fold with testing images
if(run.feature.test)
{
tm_rgb_test <- system.time(rgb_feature_test <- feature_rgb(img_dir_test, export=TRUE))
}
source("../lib/feature_all.R")
img_dir_test<- "../data/test/images/" # The fold with testing images
if(run.feature.test)
{
tm_rgb_test <- system.time(rgb_feature_test <- feature_rgb(img_dir_test, export=TRUE))
}
cat("Time for constructing RGB feature is ", tm_rgb_test[3], "s \n")
if(run.feature.test)
{
tm_hog_test <- system.time(hog_feature_test <- feature_hog(img_dir_test, export=TRUE))
}
cat("Time for constructing hog feature is ", tm_hog_test[3], "s \n")
if(run.feature.test)
{
tm_pca_sift_test <- system.time(pca_sift_feature_test <- feature_pca(img_dir_test, export=TRUE))
}
source("../lib/Test.R")
gbm.sift.test <- gbm_test(fit_gbm.sift, sift_feature_test) # need to be provided
gbm.sift.test <- gbm_test(fit_gbm.sift, rsh_test)
source("../lib/Test.R")
gbm.sift.test <- gbm_test(fit_gbm.sift, rsh_test)
gbm.sift.test <- gbm_test(fit_xgb_rsh, rsh_test)
rsh_test <- as.matrix(cbind(rgb_feature_test, hog_feature_test))
gbm.sift.test <- gbm_test(fit_xgb_rsh, rsh_test)
gbm.sift.test <- gbm_test(fit_xgb_rsh, as.matrix(rsh_test))
gbm.sift.test <- xgb_test(fit_xgb_rsh, as.matrix(rsh_test))
gbm.sift.test
gbm.sift.test <- xgb_test(fit_xgb_rsh, rsh_test)
load("/Users/xiaoxiaoguo/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/d6489b00059309d113e8df1725f2ff52/Message/MessageTemp/ab689b229ef57792ae6c0aa0c83c448e/File/xgb_model.RData")
gbm.sift.test <- xgb_test(fit_xgb_rsh, rsh_train[sample(1:2000),])
gbm.sift.test
xgb.rsh.test <- xgb_test(fit_xgb_rsh, rsh_train[sample(1:2000),])
index <- sample(1:2000)
xgb.rsh.test <- xgb_test(fit_xgb_rsh, rsh_train[index,])
error <- mean(xgb.rsh.test != label_train[index,3]-1)
error
error
mean(xgb.rsh.test != label_train[index,3]-1)
index <- sample(1:2000)
xgb.rsh.test <- xgb_test(fit_xgb_rsh, rsh_train[index,])
error <- mean(xgb.rsh.test != label_train[index,3]-1)
error
xgb.rsh.test != label_train[index,3]-1
View(rsh_train)
sstr
str(hog_feature)
str(sift_train)
str(rgb_feature)
index <- sample(1:2000)
xgb.rsh.test <- xgb_test(fit_xgb_rsh, rsh_train[index,])
error_xgb <- mean(xgb.rsh.test != label_test - 1)
